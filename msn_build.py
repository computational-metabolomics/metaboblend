import os
import sys
import urllib.request
import csv
import tempfile
import datetime
import networkx as nx
from rdkit import Chem
from shutil import rmtree
import pickle
import cProfile, pstats, io
from rdkit.Chem import Descriptors

sys.path.append(os.path.join("..", "..", "..", "metaboblend", "metaboblend"))
from build_structures import annotate_msn


def run_test(out_dir, ms_data, max_valence, ppm, db_path, max_atoms_available=2, test_type="ind_exp", ncpus=None, connectivity_path=None):
    """
    Wrapper for running tests for the MS2 structure generation & ranking method.

    :param out_dir: The directory in which to output results of the testing.

    :param ms_data: Dictionary generated by parse_testing_data or similar.

    :param test_name: Name of the test.

    :param heavy_atoms: Allowable heavy atoms of substructures.

    :param max_valence: Maximal valence of sets of substructures.

    :param accuracy: Accuracy of the build method.

    :param ppm: Allowable error of the build method.

    :param db_path: Path of the substructure database.

    :param test_type: The type of test to be run.

    :param subset: Whether or not to only include substructures generated by the compound of interest.

    :param max_atoms_available: Maximum atoms available for substructures used for building.
    """

    if test_type == "ind_exp":
        C(out_dir, ms_data, max_valence, ppm, db_path, max_atoms_available, ncpus=ncpus, connectivity_path=connectivity_path)
    else:
        raise NotImplementedError


def C(out_dir, ms_data, max_valence, ppm, db_path, max_atoms_available, ncpus, connectivity_path):
    """Run a test on MS2 data. See run_test."""

    for category in ms_data.keys():
        os.mkdir(os.path.join(out_dir, category))

        try:
            del ms_data[category][""]
        except KeyError:
            pass

        annot_msn_data = {}
        for hmdb in ms_data[category].keys():

            annot_msn_data[hmdb] = {}
            annot_msn_data[hmdb]["mf"] = ms_data[category][hmdb]["mc"]
            annot_msn_data[hmdb]["precursor_mz"] = ms_data[category][hmdb]["precursor_ion_mass"]
            annot_msn_data[hmdb]["fragment_mzs"] = ms_data[category][hmdb]["peaks"]
            annot_msn_data[hmdb]["precursor_type"] = "[M+H]+"

        pr = cProfile.Profile()
        pr.enable()
        annotations = list(annotate_msn(
            path_out=os.path.join(out_dir, category),
            msn_data=annot_msn_data,
            path_substructure_db=db_path,
            path_connectivity_db=connectivity_path,
            ha_min=None,
            ha_max=None,
            max_degree=max_valence,
            ppm=ppm,
            write_csv_output=True,
            max_atoms_available=max_atoms_available,
            yield_smis=False,
            isomeric_smiles=False,
            retain_substructures=False,
            ncpus=ncpus
        ))
        pr.disable()
        pr.print_stats(sort='cumtime')
        pr.dump_stats(os.path.join(out_dir, category, "_stats.profile"))
